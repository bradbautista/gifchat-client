import React, { Component } from 'react'
import { Link } from 'react-router-dom'
import './Home.css'
import NavButton from './NavButton'

export default class Home extends Component {

  // It'll arise naturally but think about what state we might need to track on this page if any; may just come in the form of context provision

  constructor(props) {
    super(props);
    this.state = {
      destination: '',
      roomRequested: false,
      showDestinationField: false,
      swapped: false,
    };

  }

  getRoom = () => {

    // >> user clicks "Get a room"

    // Send a POST request to the server (/ or /rooms/ or /requestRoom)
    // server should create a room at a URL and respond with that URL
    // 

  }

  handleChange = (e) => {
    
    this.setState({destination: e.target.value});
  
  }


  toggleRoomRequested = () => {
    const currentState = this.state.roomRequested;
    this.setState({ roomRequested: !currentState})
  }

  toggleShowDestinationField = () => {
    const currentState = this.state.showDestinationField;
    this.setState({ showDestinationField: !currentState})
  }

  toggleSwap = () => {
    const currentState = this.state.swapped;
    this.setState({ swapped: !currentState})
  }

  render() {

    const linkLocation = <Link to='/rooms/'>Some words</Link>

    return (
        <>
        <header>
          <h1>GifChat</h1>
        </header>
        
        <main>
            <section>

                {/* Ultimately we want a function invocation on button click,
                and a different one for each button. So let's walk through
                what everything needs to do:
                
                When "Get a room" is clicked, a link is generated by the server,
                it will requestRoom() -- send a POST request to the server to generate a new room

                Copy to clipboard?
                
                
                */}
                <button
                  onClick={this.toggleRoomRequested}
                  className={((this.state.roomRequested) ? 'hidden' : null) + ' ' + 'room-button'}
                  >
                  Get a room
                </button>
                <button
                  onClick={this.toggleRoomRequested}
                  className={((this.state.roomRequested) ? null : 'hidden') + ' ' + 'room-button'}
                  >
                  Room created at <Link style={{ fontWeight : 900 }} to="/rooms/">a-maleficent-chartreuse-hippopotamus-named-maximillian.</Link> Link copied to clipboard!
                </button>

              <NavButton 
                frontCardText="Get a room" 
                backCardText={`Room created at ${linkLocation}! Link copied to clipboard!`}
              />
              
              <NavButton 
                frontCardText={<Link to="/randos">Text</Link>}
                backCardText={'Room created at ' + <Link to="/randos">Text</Link>}

              />

                {/* GO TO ROOM */}

                <button
                  onClick={this.toggleShowDestinationField}
                  className='room-button'
                  >
                  <Link to="/rooms/">Go to room</Link>
                </button>
                <div className='input-flex-wrapper'>
                  <input 
                    className={((this.state.showDestinationField) ? '' : 'hidden') + ' ' + 'destination-field'} 
                    value={this.state.destination} 
                    onChange={this.handleChange} 
                    type="text" placeholder="Enter URL"/>
                  <button className={((this.state.showDestinationField) ? '' : 'hidden') + ' ' + 'go-button'}>Go</button>
                </div>
                
                <br />
                
                <button className='room-button' onClick={() => this.props.history.push('/randos/')}>Get a rando</button>

            

                {/* Let's look for candidates for components here? */}
                <h2>Here's how this works</h2>
                <ul>
                    <li><strong>No logins.</strong> GifChat does not want your email address.</li>
                    <li><strong>No names.</strong> GifChat does not care who you are.</li>
                    <li><strong>Two to a room.</strong></li>
                    <li><strong>GIFs only.</strong></li>
                    <li><strong>Conversations last while they're active.</strong> Your room URL is your link to that conversation. If conversations go inactive for seven days, they disappear and the room is closed.</li>
                </ul>

                <button className="btn btn-border-pop">Border Pop</button> 
            
            </section>


                


        </main>

        <footer>
          {/* We'll also need to import FontAwesome icons or just use text links */}
          <a href="meongithub">FA GH</a> <a href="meonlinkedin">FA LI</a>
        </footer>

        </>
    );
  }  
}
